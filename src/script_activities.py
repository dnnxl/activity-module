# -*- coding: utf-8 -*-
"""script_activities

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11xK3sTAMV3Zdco5vw1u6yre6RP3pNMd2

Import the libraries
"""

from os import listdir
from os.path import isfile, join
from collections import Counter

import inspect
import time 
import pandas as pd
import datetime as dt
import matplotlib.pyplot as plt
import numpy as np
import argparse

"""Some utilities"""

def delete_column(pColumnName, pDataframe):
    '''
    Description:
        Drop the column of a dataframe providing the name of the column name.

    Args:
        pColumnName(str): The name of the column in the dataframe.
        pDataframe(pandas.core.frame.DataFrame): The dataframe provided to drop the column.
    
    Returns:
        pandas.core.frame.DataFrame: The dataframe with the column dropped.
    '''
    try:
        return dataframe.drop(pColumnName, axis=1)
    except KeyError:
        print("Could not drop the column {0} in the dataframe provided".format(pColumnName))


def get_files(pPath):
    '''
    Description:
        Get the files path provided by the root path of the directory.

    Args:
        pPath(str): The root path of the directory.
    
    Returns:
        List of str: The list of string of the path to all the files in the directory.
    '''
    try:
        files = [join(pPath, f) for f in listdir(pPath) if isfile(join(pPath, f))]
        files = [file.replace('.gsheet', '') for file in files if '.csv' in file]
        return files
    except:
        print("Could not process the path {0}".format(pPath))

def get_dataframes(pFiles):
    """
    Description:
        Get the dataframes provided by the list of path of the files, the list of files should be
        files in format .csv.

    Args:
        pFiles(list of str): The list of csv files.
    
    Returns:
        List of pandas.core.frame.DataFrame: The list of dataframes.
    """
    dataframes =  [pd.read_csv(new_file) for new_file in pFiles]
    return dataframes

def concat_dataframes(pListDataframe):
    """
    Description:
        Concatenate dataframes in the list of dataframes provided by the list.

    Args:
        pListDataframe(list of pandas.core.frame.DataFrame): The list of pandas dataframes.
    
    Returns:
        pandas.core.frame.DataFrame: The dataframe concatenated. 
    """
    return pd.concat(pListDataframe)

def print_columns(pDataframe):
    """
    Description:
        Get the list of string of the column of the dataframe.

    Args:
        pDataframe(pandas.core.frame.DataFrame): Dataframe.
    
    Returns:
        List of string: The list of columns in the dataframe. 
    """
    return list(pDataframe.columns)

def get_values(pColumn, pDataframe):
    """
    Description:
        Get the list of string of the unique values of the column of the dataframe.

    Args:
        pColumn(str): The name of the column in the dataframe.
        pDataframe(pandas.core.frame.DataFrame): Dataframe.
    
    Returns:
        List of string: The list of unique values in the column provided in the dataframe. 
    """
    return list(pDataframe[pColumn].unique())

def delete_list_column(pColumnListName, pDataframe):
    """
    Description:
        Select the list of columns of the dataframe and return the dataframe.

    Args:
        pColumnListName(list of str): The list of strings of the dataframe columns.
        pDataframe(pandas.core.frame.DataFrame): Dataframe.
    
    Returns:
        pandas.core.frame.DataFrame: The dataframe with the column selected. 
    """
    return pDataframe[pColumnListName]

def export_dataframe(pDataframe, pNameFile="report.csv", pRoot="."):
    """
    Description:
        Export the dataframe to a csv file.

    Args:
        pNameFile(str): Name to save the csv file.
        pRoot(str): The root path where wanna export the csv file.
        pDataframe(pandas.core.frame.DataFrame): Dataframe.
    
    Returns:
        None. 
    """
    pDataframe.to_csv(join(pRoot, pNameFile))
    print('CSV File {0} created in the root {1}'.format(pNameFile, pRoot))

def fill_nan_column(pColumn, pDataframe):
    """
    Description:
        Fill the column provided with 0's values in the dataframe.

    Args:
        pColumn(str): Column name.
        pDataframe(pandas.core.frame.DataFrame): Dataframe.
    
    Returns:
        None.
    """
    pDataframe[pColumn].fillna(0, inplace=True)

def sort_values_column(pColumn, pDataframe, pAscending=False):
    """
    Description:
        Sort the values in the column of the dataframe.

    Args:
        pColumn(str): Column name.
        pDataframe(pandas.core.frame.DataFrame): Dataframe.
        pAscending(bool): Is ascending 
    
    Returns:
        pandas.core.frame.DataFrame: Dataframe. 
    """
    return pDataframe.sort_values(by=[pColumn], ascending=pAscending)

def get_number_attendance(pColumn, pDataframe):
    """
    Description:
        Get the number of attendance of the dataframe, the attribute of the columns are.

    Args:
        pColumn(str): Column name.
        pDataframe(pandas.core.frame.DataFrame): Dataframe.
    
    Returns:
        int: The number of attendance. 
    """
    pDataframe[pColumn].fillna(0, inplace=True)
    list_values = get_values(pColumn, pDataframe)
    attendance = sum(list_values)
    return attendance

def build_tooltip(function):
    """
    Description:
        Create a tooltip for any function that shows the function's docstring.
  
    Args:
        function (callable): The function we want a tooltip for.
    
    Returns:
        str
    """
    # Use 'inspect' to get the docstring
    docstring = inspect.getdoc(function)
    border = '#' * 28
    return '{}\n{}\n{}'.format(border, docstring, border)

def print_list(pList):
    """
    Description:
        Print all the elements in the list.
  
    Args:
        pList (list): The list of elements we want to print.
    
    Returns:
        None.
    """
    for ele in pList:
        print("+ ", ele)
    
def get_number_category(pColumn, pDataframe):
    """
    Description:
        Get the values of categories and the number of each category.
  
    Args:
        pColumn (str): The key value of the column of the category.
        pDataframe (pandas.core.frame.DataFrame): The dataframe.
    
    Returns:
        List of strings and List of numbers: The string names of the category and the number of activies of each category.
    """
    categories = get_values(pColumn, pDataframe)

    categories_number = []

    for cat in categories:
        categories_number.append(len(pDataframe[pDataframe[pColumn] == cat]))
    
    return categories, categories_number

def plot_piechart_activity(pCategoryNumber, pCategory):
    """
    Description:
        Plot a pie chart of the categories and categories amount for each one of those.
  
    Args:
        pCategoryNumber (list int): The amount of each category.
        pCategory (list str): The category keywords.
    
    Returns:
        None.
    """
    plt.pie(pCategoryNumber, labels = pCategory, shadow = True)
    plt.legend(title = "Categorias")
    plt.show() 

def get_category_numbers(pCategory, pColumn_category, pColumn_date, pDataframe, pYear):
    """
    Description:
        Get the number of activities for each category.
  
    Args:
        pCategory (str): The category activity type.
        pColumn_category (str): The column category.
        pColumn_date (str): The column date.
        pDataframe (pandas.core.frame.DataFrame): The dataframe.
        pYear (int): The year want to query.
    
    Returns:
        List of int. The list of number per month of the category.
    """
    pDataframe[pColumn_date] = pd.to_datetime(pDataframe[pColumn_date], dayfirst=True)
    dataframe = pDataframe.set_index([pColumn_date])
    dataframe = dataframe[dataframe[pColumn_category] == pCategory]
    list_number = []
    for month in range(1, 13):
        num = list(dataframe.loc['{0}-{1}'.format(pYear, month)].count())[0]
        list_number.append(num)
    return list_number

"""Generate the report"""

def generate_report(pPath, pNameFile, pRootPath):
    
    # Get the files of the root path.
    vCsv_files = get_files(pPath)

    # Get the dataframes from the files
    vList_dataframes = get_dataframes(vCsv_files)

    # Concat the dataframes
    vDataframe = concat_dataframes(vList_dataframes)

    # Drop the duplicated rows
    vDataframe = vDataframe.drop_duplicates()

    # Attendance columns attribute
    attendance = ['Number of Attendance',
       'Number of IEEE Member Attendees', 'Number of Non-Member Attendees']

    # Fill with 0 the nan values in the attendance columns.
    for attribute in attendance:
        fill_nan_column(attribute, vDataframe)


    # Number of attendance total
    total_attendance = get_number_attendance('Number of Attendance', vDataframe)

    # Number of attendance IEEE total
    total_attendance_ieee = get_number_attendance('Number of Non-Member Attendees', vDataframe)

    # Number of attendance no IEEE total
    total_attendance_non_ieee = get_number_attendance('Number of IEEE Member Attendees', vDataframe)

    # Number of total activities
    total_activities = len(vDataframe)

    # Organization Unit
    units = get_values('Organizational Unit', vDataframe)

    # Category numbers pCategory, pColumn_category, pColumn_date, pDataframe, pYear
    admin = get_category_numbers('Administrative', 'Event Category', 'Event Date', vDataframe, 2020)
    non_technical = get_category_numbers('Non-technical', 'Event Category', 'Event Date', vDataframe, 2020)
    technical = get_category_numbers('Technical', 'Event Category', 'Event Date', vDataframe, 2020)
    other = get_category_numbers('Other', 'Event Category', 'Event Date', vDataframe, 2020)
    other = get_category_numbers('Other', 'Event Category', 'Event Date', vDataframe, 2020)
    humanitarian = get_category_numbers('Humanitarian', 'Event Category', 'Event Date', vDataframe, 2020)
    professional = get_category_numbers('Professional', 'Event Category', 'Event Date', vDataframe, 2020)

    # Category reported
    category = get_values('Event Category', vDataframe)

    # Print
    print("-------------------------------------------------------")

    print("GENERATE THE REPORT")

    print("-------------------")

    print("Date: From 01 January 2020 to 01 January 2021 ")
    print()
    print("Hour: {0}".format(time.ctime()))
    print()
    print("------------------")

    print("ACTIVITIES DETAILS")

    print("------------------")

    print("Number of Attendance: ", total_attendance)
    print()
    print("Number of Non-Member Attendees: ", total_attendance_ieee)
    print()
    print("Number of IEEE Member Attendees: ", total_attendance_non_ieee)
    print()
    print("Number of activities: ", total_activities)
    print()
    print("Organization Units reported: ")
    print()
    print_list(units)
    print()

    print("Category types reported: ")
    print()
    print_list(category)

    print("Numbers by category: ")
    print()
    print('Administrative', admin)
    print('Non-technical', non_technical)
    print('Technical', technical)
    print('Other', other)
    print('Humanitarian', humanitarian)
    print('Professional', professional)
    print()

    print("Generating the csv file")
    print()
    export_dataframe(vDataframe, pNameFile, pRootPath)
    print()

    print("Generated in the path {0}. The file is called {1}".format(pRootPath, pNameFile))
    print()
    categories, categories_number = get_number_category('Event Category', vDataframe)
    plot_piechart_activity(categories_number, categories)

root = '/content/drive/MyDrive/actividades-chapters'

generate_report(root, 'activities', '.')

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description='Generate report.')

    parser.add_argument('root', help='root to the csv files.')

    parser.add_argument('name', help='name of the csv file to generate.')

    args = parser.parse_args()

    generate_report(args.root, args.name, '.')



